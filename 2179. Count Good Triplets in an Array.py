from typing import List
class Solution:
    def goodTriplets(self, nums1: List[int], nums2: List[int]) -> int:
        # 剪枝算法
        def per_n3(nums1,curent_index,ans):
            # stop的一些条件
            if curent_index>len(nums1)-(3-len(ans)):
                return 0
            if len(ans)==2:

                num=nums1[curent_index]
                nums2_index=mapping_index_nums2[num]
                if nums2_index>ans[-1]:
                    return 1 + per_n3(nums1,curent_index+1, ans)
                return per_n3(nums1,curent_index+1, ans)

            if len(ans)==1:
                num=nums1[curent_index]
                nums2_index=mapping_index_nums2[num]
                if nums2_index>ans[-1]:
                    return per_n3(nums1,curent_index+1, ans+[nums2_index])+per_n3(nums1,curent_index+1, ans)
                return per_n3(nums1,curent_index+1, ans)
            
            num=nums1[curent_index]
            nums2_index=mapping_index_nums2[num]
            if nums2_index>NUM_LEN-3:
                return per_n3(nums1,curent_index+1,ans)
            return per_n3(nums1,curent_index+1,ans)+per_n3(nums1,curent_index+1,ans+[nums2_index])

          
        mapping_index_nums2={}
        for index,num in enumerate(nums2):
            mapping_index_nums2[num]=index 
        NUM_LEN=len(nums1)
        # 剪枝算法,当nums1 的 n1 n2  对应的 不满足 nums2 p1 < p2  时，就不用再看了。 p1对应的隐藏条件 p1位置, p1<=n-2
        # 剩下就是写排列算法，从n中选择三个数的算法。 
        return per_n3(nums1,0,[])

if __name__=="__main__":
    solution=Solution()
    # ans=solution.goodTriplets( nums1 = [2,0,1,3], nums2 = [0,1,2,3])
    ans=solution.goodTriplets(nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3])
    print(ans)
    ans=solution.goodTriplets([52,173,404,439,307,69,199,87,306,378,84,186,17,99,267,338,64,180,255,408,226,116,158,427,259,113,20,432,70,323,194,440,93,14,176,201,395,12,389,284,163,86,195,120,106,331,94,297,254,80,107,197,271,192,368,410,435,66,36,200,411,13,3,6,68,155,26,133,167,109,276,424,387,272,346,400,178,175,227,252,49,332,112,266,371,110,245,220,370,24,384,141,263,149,249,406,385,170,145,144,59,409,218,353,40,161,381,302,123,193,374,253,291,23,258,15,303,247,134,423,188,298,57,345,58,407,165,140,286,396,74,160,111,157,63,223,312,118,31,228,46,105,73,97,166,399,412,401,315,181,82,79,143,191,386,92,251,324,61,128,122,126,275,417,182,35,154,287,380,190,204,369,88,75,330,270,4,264,327,54,47,243,372,356,136,78,233,235,30,391,383,85,138,135,124,142,232,34,28,293,333,290,265,257,27,316,354,91,213,341,299,402,150,420,21,238,5,55,273,219,2,103,207,208,95,32,83,351,418,398,159,256,137,343,403,365,121,282,212,164,339,350,317,108,392,90,355,114,349,240,65,225,139,375,16,373,117,234,318,53,246,130,29,322,294,431,337,295,329,377,269,198,421,388,314,262,162,89,285,214,131,313,279,184,367,98,236,189,366,320,342,11,177,43,229,358,304,206,156,274,416,132,187,205,292,196,335,153,217,100,148,289,152,268,340,325,230,8,437,336,413,50,76,425,71,280,41,224,179,202,18,171,9,309,239,348,414,48,115,376,359,438,77,96,344,45,174,397,125,185,169,288,283,211,147,0,347,172,296,231,308,321,237,277,209,7,326,129,352,311,415,428,203,216,436,210,81,361,429,393,319,221,10,51,363,362,72,360,441,300,301,1,183,56,127,250,119,67,60,168,357,281,261,244,364,422,379,38,248,37,242,426,405,146,434,328,419,62,151,260,102,430,22,215,101,39,310,305,33,334,104,433,222,25,44,19,241,278,42,394,382,390],
[201,341,379,395,239,71,7,420,367,179,326,435,223,360,134,327,81,397,225,403,273,343,347,69,304,368,255,115,436,204,245,381,36,97,148,79,309,120,144,302,188,408,119,235,145,32,396,185,200,35,63,254,54,98,92,389,109,321,424,370,202,88,295,337,429,21,394,248,10,363,37,38,348,418,229,402,124,307,306,359,14,377,142,407,316,123,430,187,147,24,269,186,346,354,268,128,246,272,385,330,282,259,78,46,303,312,241,2,26,329,199,89,324,274,91,125,53,336,334,64,438,325,29,76,34,294,203,317,90,44,50,39,276,219,162,297,194,358,195,264,338,299,154,43,373,284,27,234,117,77,57,252,101,171,362,86,432,331,406,352,437,355,13,391,322,174,221,9,227,28,293,106,139,218,87,190,400,159,387,132,130,271,116,375,61,72,261,398,85,151,380,20,238,285,160,353,319,173,426,17,405,335,247,107,265,296,283,1,56,23,51,262,206,369,344,378,279,161,289,300,243,25,415,233,168,181,104,423,390,365,193,232,33,66,152,291,412,93,305,47,84,414,422,292,220,49,392,266,165,208,301,298,213,230,8,260,75,251,382,99,30,209,267,441,68,131,169,231,434,258,31,197,332,401,404,383,288,138,372,0,155,110,216,95,80,41,349,281,215,149,83,399,212,102,166,122,167,192,96,384,189,42,180,318,94,361,6,170,196,126,156,164,150,421,419,356,237,263,177,244,113,315,136,413,141,416,320,340,249,439,328,153,100,3,163,210,217,440,280,253,198,103,70,127,55,184,11,431,433,425,290,257,12,15,73,48,313,67,428,286,275,236,409,278,205,207,228,82,129,345,393,121,118,59,342,182,314,222,178,357,22,65,388,374,211,240,270,242,371,19,411,52,176,114,311,350,214,158,364,376,366,250,4,111,58,351,157,135,333,277,60,310,143,172,175,40,224,308,16,287,5,62,137,191,45,339,146,323,133,386,105,112,18,256,140,74,410,183,226,108,427,417])
      

    print(ans)
        